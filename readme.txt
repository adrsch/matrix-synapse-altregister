to use:
pip -r requirements.txt
flask run

then navigate to 127.0.0.1:5000

how it does stuff:

invites are generated by calling generate_invites, they are an adjustable number of random words from the words.txt file that I stole from bitcoin seed phrases.it's the bip39 word list. bcrypt used to hash password client side, the sh scripts add a user acc (it is called with a random junk password) and the other changes the password in the db to the hash sent from the client.

app.py contains code for the site using flask. good for testing and nginx can be used to serve flask stuff os for live. flask-wtf is used for the form thingy. the page in the templates folder is rendered when the page is loaded and the stuff from the flask-wtf form is put into the static content as the django tags inside it indicate. submitting sends a post request after running the js code that uses bcrypt to hash the password, and the form.validate_on_submit() thing in flask will check to see if its a valid form submission. validate functions inside the form class are called for this.

config tells the invite manager where to look for the file containing all the invites and their expirations.

invites_manager.py has stuff for handling invite codes. there is a temp file created after an invite is deemed valid so double-registering with 1 invite is less of a possibility. its still a possibility unless the invite file can be locked as it could have one instance read it, the other read it, then one validate and write and the other validate and write, but this doesnt seem too likely. might be good in the future to put a lock on the file for the read until the write is finished. also the tmp file, in the case of an exception, has the code restored from it to the normal invites file, as a guard against invites getting swallowed.

generate_invites.py will make a new invite that expires as specified. seconds has been tested but days has not because thats a pretty long time.


